/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { WrappedToken, WrappedTokenInterface } from "../WrappedToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_chainId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_originAddress",
        type: "string",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOrigin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOriginAddr",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600f6005553480156200001657600080fd5b5060405162001dd238038062001dd283398181016040528101906200003c919062000577565b8282816003908051906020019062000056929190620002b1565b5080600490805190602001906200006f929190620002b1565b50505033600860016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846006819055508360079080519060200190620000d2929190620002b1565b5080600860006101000a81548160ff021916908360ff16021790555062000124600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166005546200012f60201b60201c565b5050505050620007fd565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620001a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019890620006bd565b60405180910390fd5b620001b560008383620002a760201b60201c565b8060026000828254620001c991906200070e565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200022091906200070e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200028791906200077c565b60405180910390a3620002a360008383620002ac60201b60201c565b5050565b505050565b505050565b828054620002bf90620007c8565b90600052602060002090601f016020900481019282620002e357600085556200032f565b82601f10620002fe57805160ff19168380011785556200032f565b828001600101855582156200032f579182015b828111156200032e57825182559160200191906001019062000311565b5b5090506200033e919062000342565b5090565b5b808211156200035d57600081600090555060010162000343565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6200038a8162000375565b81146200039657600080fd5b50565b600081519050620003aa816200037f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200040582620003ba565b810181811067ffffffffffffffff82111715620004275762000426620003cb565b5b80604052505050565b60006200043c62000361565b90506200044a8282620003fa565b919050565b600067ffffffffffffffff8211156200046d576200046c620003cb565b5b6200047882620003ba565b9050602081019050919050565b60005b83811015620004a557808201518184015260208101905062000488565b83811115620004b5576000848401525b50505050565b6000620004d2620004cc846200044f565b62000430565b905082815260208101848484011115620004f157620004f0620003b5565b5b620004fe84828562000485565b509392505050565b600082601f8301126200051e576200051d620003b0565b5b815162000530848260208601620004bb565b91505092915050565b600060ff82169050919050565b620005518162000539565b81146200055d57600080fd5b50565b600081519050620005718162000546565b92915050565b600080600080600060a086880312156200059657620005956200036b565b5b6000620005a68882890162000399565b955050602086015167ffffffffffffffff811115620005ca57620005c962000370565b5b620005d88882890162000506565b945050604086015167ffffffffffffffff811115620005fc57620005fb62000370565b5b6200060a8882890162000506565b935050606086015167ffffffffffffffff8111156200062e576200062d62000370565b5b6200063c8882890162000506565b92505060806200064f8882890162000560565b9150509295509295909350565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000620006a5601f836200065c565b9150620006b2826200066d565b602082019050919050565b60006020820190508181036000830152620006d88162000696565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200071b8262000375565b9150620007288362000375565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000760576200075f620006df565b5b828201905092915050565b620007768162000375565b82525050565b60006020820190506200079360008301846200076b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620007e157607f821691505b602082108103620007f757620007f662000799565b5b50919050565b6115c5806200080d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d714610263578063a9059cbb14610293578063dd62ed3e146102c3578063df1f29ee146102f3576100ea565b806339509351146101e557806370a082311461021557806395d89b4114610245576100ea565b806323b872dd116100c857806323b872dd1461015b578063267b20fe1461018b578063313ce567146101a95780633408e470146101c7576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f7610312565b6040516101049190610e1c565b60405180910390f35b61012760048036038101906101229190610ed7565b6103a4565b6040516101349190610f32565b60405180910390f35b6101456103c7565b6040516101529190610f5c565b60405180910390f35b61017560048036038101906101709190610f77565b610406565b6040516101829190610f32565b60405180910390f35b610193610435565b6040516101a09190610e1c565b60405180910390f35b6101b16104c7565b6040516101be9190610fe6565b60405180910390f35b6101cf6104de565b6040516101dc9190610f5c565b60405180910390f35b6101ff60048036038101906101fa9190610ed7565b6104e8565b60405161020c9190610f32565b60405180910390f35b61022f600480360381019061022a9190611001565b610592565b60405161023c9190610f5c565b60405180910390f35b61024d6105da565b60405161025a9190610e1c565b60405180910390f35b61027d60048036038101906102789190610ed7565b61066c565b60405161028a9190610f32565b60405180910390f35b6102ad60048036038101906102a89190610ed7565b610756565b6040516102ba9190610f32565b60405180910390f35b6102dd60048036038101906102d8919061102e565b610779565b6040516102ea9190610f5c565b60405180910390f35b6102fb610800565b60405161030992919061106e565b60405180910390f35b606060038054610321906110cd565b80601f016020809104026020016040519081016040528092919081815260200182805461034d906110cd565b801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b5050505050905090565b6000806103af61089d565b90506103bc8185856108a5565b600191505092915050565b60006103f4600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610592565b600554610401919061112d565b905090565b60008061041161089d565b905061041e858285610a6e565b610429858585610afa565b60019150509392505050565b606060078054610444906110cd565b80601f0160208091040260200160405190810160405280929190818152602001828054610470906110cd565b80156104bd5780601f10610492576101008083540402835291602001916104bd565b820191906000526020600020905b8154815290600101906020018083116104a057829003601f168201915b5050505050905090565b6000600860009054906101000a900460ff16905090565b6000600654905090565b6000806104f361089d565b9050610587818585600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105829190611161565b6108a5565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546105e9906110cd565b80601f0160208091040260200160405190810160405280929190818152602001828054610615906110cd565b80156106625780601f1061063757610100808354040283529160200191610662565b820191906000526020600020905b81548152906001019060200180831161064557829003601f168201915b5050505050905090565b60008061067761089d565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508381101561073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490611229565b60405180910390fd5b61074a82868684036108a5565b60019250505092915050565b60008061076161089d565b905061076e818585610afa565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600060606006546007808054610815906110cd565b80601f0160208091040260200160405190810160405280929190818152602001828054610841906110cd565b801561088e5780601f106108635761010080835404028352916020019161088e565b820191906000526020600020905b81548152906001019060200180831161087157829003601f168201915b50505050509050915091509091565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610914576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090b906112bb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097a9061134d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a619190610f5c565b60405180910390a3505050565b6000610a7a8484610779565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610af45781811015610ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610add906113b9565b60405180910390fd5b610af384848484036108a5565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b609061144b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcf906114dd565b60405180910390fd5b610be3838383610d79565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c609061156f565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cfc9190611161565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d609190610f5c565b60405180910390a3610d73848484610d7e565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610dbd578082015181840152602081019050610da2565b83811115610dcc576000848401525b50505050565b6000601f19601f8301169050919050565b6000610dee82610d83565b610df88185610d8e565b9350610e08818560208601610d9f565b610e1181610dd2565b840191505092915050565b60006020820190508181036000830152610e368184610de3565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e6e82610e43565b9050919050565b610e7e81610e63565b8114610e8957600080fd5b50565b600081359050610e9b81610e75565b92915050565b6000819050919050565b610eb481610ea1565b8114610ebf57600080fd5b50565b600081359050610ed181610eab565b92915050565b60008060408385031215610eee57610eed610e3e565b5b6000610efc85828601610e8c565b9250506020610f0d85828601610ec2565b9150509250929050565b60008115159050919050565b610f2c81610f17565b82525050565b6000602082019050610f476000830184610f23565b92915050565b610f5681610ea1565b82525050565b6000602082019050610f716000830184610f4d565b92915050565b600080600060608486031215610f9057610f8f610e3e565b5b6000610f9e86828701610e8c565b9350506020610faf86828701610e8c565b9250506040610fc086828701610ec2565b9150509250925092565b600060ff82169050919050565b610fe081610fca565b82525050565b6000602082019050610ffb6000830184610fd7565b92915050565b60006020828403121561101757611016610e3e565b5b600061102584828501610e8c565b91505092915050565b6000806040838503121561104557611044610e3e565b5b600061105385828601610e8c565b925050602061106485828601610e8c565b9150509250929050565b60006040820190506110836000830185610f4d565b81810360208301526110958184610de3565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110e557607f821691505b6020821081036110f8576110f761109e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113882610ea1565b915061114383610ea1565b925082821015611156576111556110fe565b5b828203905092915050565b600061116c82610ea1565b915061117783610ea1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111ac576111ab6110fe565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611213602583610d8e565b915061121e826111b7565b604082019050919050565b6000602082019050818103600083015261124281611206565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006112a5602483610d8e565b91506112b082611249565b604082019050919050565b600060208201905081810360008301526112d481611298565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611337602283610d8e565b9150611342826112db565b604082019050919050565b600060208201905081810360008301526113668161132a565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006113a3601d83610d8e565b91506113ae8261136d565b602082019050919050565b600060208201905081810360008301526113d281611396565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611435602583610d8e565b9150611440826113d9565b604082019050919050565b6000602082019050818103600083015261146481611428565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006114c7602383610d8e565b91506114d28261146b565b604082019050919050565b600060208201905081810360008301526114f6816114ba565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611559602683610d8e565b9150611564826114fd565b604082019050919050565b600060208201905081810360008301526115888161154c565b905091905056fea264697066735822122064cf726213fb21a8da6bb7f6cde23c65a45a83bd8a534134ad7d70834d468c0564736f6c634300080d0033";

type WrappedTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WrappedTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WrappedToken__factory extends ContractFactory {
  constructor(...args: WrappedTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "WrappedToken";
  }

  deploy(
    _chainId: BigNumberish,
    _originAddress: string,
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<WrappedToken> {
    return super.deploy(
      _chainId,
      _originAddress,
      _name,
      _symbol,
      _decimals,
      overrides || {}
    ) as Promise<WrappedToken>;
  }
  getDeployTransaction(
    _chainId: BigNumberish,
    _originAddress: string,
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _chainId,
      _originAddress,
      _name,
      _symbol,
      _decimals,
      overrides || {}
    );
  }
  attach(address: string): WrappedToken {
    return super.attach(address) as WrappedToken;
  }
  connect(signer: Signer): WrappedToken__factory {
    return super.connect(signer) as WrappedToken__factory;
  }
  static readonly contractName: "WrappedToken";
  public readonly contractName: "WrappedToken";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WrappedTokenInterface {
    return new utils.Interface(_abi) as WrappedTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WrappedToken {
    return new Contract(address, _abi, signerOrProvider) as WrappedToken;
  }
}
